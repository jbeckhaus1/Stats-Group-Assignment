summary(indo.lm)
summary(indo.lm)
scatter.smooth(indoDates,indoFox)
scatter(indoDates,indoFox)
scatter.smooth(indoDates,indoFox)
#load and clean data
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
date=date[-dirty]
#vector of id for Indooroopilly Island Camp
idIndoIsland=which(ehpCamp=="68")
#create vector of data and total fox count for Indooroopilly Island
indoDates=date[idIndoIsland]
indoFox=totalFox[idIndoIsland]
# This is probably wrong
indo.lm=lm(indoFox ~ as.numeric(indoDates))
summary(indo.lm)
scatter.smooth(indoDates,indoFox,"","Number Of Foxes")
scatter.smooth(indoDates,indoFox)
#load and clean data
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
date=date[-dirty]
#vector of id for Indooroopilly Island Camp
idIndoIsland=which(ehpCamp=="68")
#create vector of data and total fox count for Indooroopilly Island
indoDates=date[idIndoIsland]
indoFox=totalFox[idIndoIsland]
# This is probably wrong
indo.lm=lm(indoFox ~ as.numeric(indoDates))
summary(indo.lm)
scatter.smooth(indoDates,indoFox)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.dist, conf.level = 0.95)
sd(boot.dist)
}
hist(boot.dist)
scatter.smooth(boot.dist)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.dist)
sd(boot.dist)
}
scatter.smooth(boot.dist)
hist(boot.dist)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.dist, conf.level = 0.95)
sd(boot.dist)
}
hist(boot.dist)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
#boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.dist, conf.level = 0.95)
sd(boot.dist)
}
scatter.smooth(boot.dist)
source('~/.active-rstudio-document', echo=TRUE)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
#boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
scatter.smooth(boot.dist)
hist(boot.dist)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
hist(boot.dist)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
hist(boot.dist)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
scatter.smooth(boot.dist)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.log=log(boot.sample)
boot.dist[i]=mean(boot.log, conf.level = 0.95)
#sd(boot.dist)
}
scatter.smooth(boot.dist)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
scatter.smooth(boot.dist)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
hist(boot.dist)
sum(is.NA(foxyCamps))
sum(where(is.NA(foxyCamps)))
sum(which(is.NA(foxyCamps)))
sum(which(is.na(foxyCamps)))
sum(is.na(foxyCamps))
##natural logarithm of the total species count per camp
foxyCamps=which(foxData$FlyingFoxesAbsent!=TRUE)
foxyCamps=totalFox[foxyCamps]
foxyCamps=foxyCamps[-dirty]
log.CampSize=log(foxyCamps)
#paste(totalFox,logCampSize)
#logCampSize
foxyCamps.length=length(foxyCamps)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
hist(boot.dist)
sum(is.na(foxyCamps))
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
hist(boot.dist)
sum(is.na(foxyCamps))
##natural logarithm of the total species count per camp
foxyCamps=which(foxData$FlyingFoxesAbsent!=TRUE)
foxyCamps=totalFox[foxyCamps]
foxyCamps=foxyCamps[-dirty]
log.CampSize=log(foxyCamps)
#paste(totalFox,logCampSize)
#logCampSize
foxyCamps.length=length(foxyCamps)
sum(is.na(foxyCamps))
##histogram of camp size logarithm
hist(log.CampSize)
##natural logarithm of the total species count per camp
iCanHasFox=foxData$FlyingFoxesAbsent[-dirty]
foxyCamps=which(foxData$FlyingFoxesAbsent!=TRUE)
foxyCamps=totalFox[foxyCamps]
foxyCamps=foxyCamps[-dirty]
log.CampSize=log(foxyCamps)
#paste(totalFox,logCampSize)
#logCampSize
foxyCamps.length=length(foxyCamps)
sum(is.na(foxyCamps))
##histogram of camp size logarithm
hist(log.CampSize)
##natural logarithm of the total species count per camp
iCanHasFox=foxData$FlyingFoxesAbsent[-dir]
##natural logarithm of the total species count per camp
iCanHasFox=foxData$FlyingFoxesAbsent[-dirty]
foxyCamps=which(iCanHasFox!=TRUE)
foxyCamps=totalFox[foxyCamps]
foxyCamps=foxyCamps[-dirty]
log.CampSize=log(foxyCamps)
#paste(totalFox,logCampSize)
#logCampSize
foxyCamps.length=length(foxyCamps)
sum(is.na(foxyCamps))
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
hist(boot.dist)
scatter.smooth(boot.dist)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
scatter.smooth(boot.dist)
#load the data from csv
foxData = read.csv("FlyingFoxMonitoring.csv",header = TRUE)
#converting factor to integer
blkFox <- suppressWarnings(c(as.numeric(as.character(foxData$BlackFlyingFox.Count))))
redFox<- suppressWarnings(c(as.numeric(as.character(foxData$LittleRedFlyingFox.Count))))
greyFox<- suppressWarnings(c(as.numeric(as.character(foxData$GreyHeadedFlyingFox.Count))))
totalFox <- suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))
camp <- (as.character(foxData$Camp))
ehpCamp<-foxData$EHP.CampId
#identify rows where variable FlyingFoxesAbsent does not match the total count being zero or not.
idHasFox=which(foxData$FlyingFoxesAbsent!=TRUE)
idHasNoFox=which(suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))!=0)
illogicalFox=setdiff(idHasFox,idHasNoFox)
##removing data with NA
#make a vector of the rows which have missing or inconsistent data
idNA=c(which(is.na(blkFox)),which(is.na(redFox)),which(is.na(greyFox)),which(is.na(totalFox)),which(is.na(camp)),illogicalFox,which(is.na(ehpCamp)))
paste(length(idNA),"cases have NAs")
#remove those rows
blkFox=blkFox[-idNA]
redFox=redFox[-idNA]
greyFox=greyFox[-idNA]
totalFox=totalFox[-idNA]
#calculate totals based on each species
myTotal = blkFox+redFox+greyFox
diffTotals = totalFox-myTotal
#make a vector where if the difference between the actual total and the sum of each species doesn't match the value is NA and if it does it's "good"
idBadMath=ifelse(diffTotals!=0,NA,"good")
paste(sum(is.na(idBadMath)),"rows have totals that dont match the sum of each species")
#making a vecor of the NAs (which are actually the rows with bad maths)
idBadMath=which(is.na(idBadMath))
#removing the rows that have bad maths
blkFox=blkFox[-idBadMath]
redFox=redFox[-idBadMath]
greyFox=greyFox[-idBadMath]
totalFox=totalFox[-idBadMath]
dirty <-c(idNA,idBadMath)
camp=camp[-dirty]
ehpCamp=ehpCamp[-dirty]
##natural logarithm of the total species count per camp
iCanHasFox=foxData$FlyingFoxesAbsent[-dirty]
foxyCamps=which(iCanHasFox!=TRUE)
foxyCamps=totalFox[foxyCamps]
foxyCamps=foxyCamps[-dirty]
log.CampSize=log(foxyCamps)
#paste(totalFox,logCampSize)
#logCampSize
foxyCamps.length=length(foxyCamps)
sum(is.na(foxyCamps))
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
scatter.smooth(boot.dist)
scatter.smooth(boot.dist,boot.sample)
scatter.smooth ?
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
b = 1000
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(log.CampSize, replace=TRUE)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
scatter.smooth(boot.dist)
hist(boot.dist)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
smoothScatter(boot.dist)
scatter.smooth(boot.dist)
scatter.smooth(sd(boot.dist),boot.dist)
sd(boot.dist)
scatter.smooth(sd(boot.dist),boot.dist)
sd(boot.dist)
##natural logarithm of the total species count per camp
iCanHasFox=foxData$FlyingFoxesAbsent[-dir]
##natural logarithm of the total species count per camp
iCanHasFox=foxData$FlyingFoxesAbsent[-dirty]
foxyCamps=which(iCanHasFox!=TRUE)
foxyCamps=totalFox[foxyCamps]
foxyCamps=foxyCamps[-dirty]
log.CampSize=log(foxyCamps)
#paste(totalFox,logCampSize)
#logCampSize
foxyCamps.length=length(foxyCamps)
sum(is.na(foxyCamps))
##histogram of camp size logarithm
hist(log.CampSize)
##natural logarithm of the total species count per camp
iCanHasFox=foxData$FlyingFoxesAbsent[-dirty]
foxyCamps=which(iCanHasFox!=TRUE)
foxyCamps=totalFox[foxyCamps]
foxyCamps=foxyCamps[-dirty]
log.CampSize=log(foxyCamps)
#paste(totalFox,logCampSize)
#logCampSize
foxyCamps.length=length(foxyCamps)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
hist(boot.dist)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(log.CampSize, replace=TRUE)
#boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
hist(boot.dist)
plot(boot.dist)
plot(boot.dist,foxyCamps.length)
plot(boot.dist,foxyCamps.length)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(log.CampSize, replace=TRUE)
#boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
plot(foxyCamps.length,boot.dist)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 1000
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.sample, conf.level = 0.95)
#sd(boot.dist)
}
plot(foxyCamps.length,foxyCamps)
plot(boot.dist,boot.sample)
?cut
## Load the package
library(Lock5Data)
## Load the dataset
data(GPAGender)
## Attach the data set
attach(GPAGender)
cut(GPA,3,)
cut(GPA,3)
?frequency
bands=cut(GPA,3)
frequency(bands)
## Load the package
library(Lock5Data)
## Load the dataset
data(GPAGender)
## Attach the data set
attach(GPAGender)
## Load the package
library(Lock5Data)
## Load the dataset
data(GPAGender)
## Attach the data set
attach(GPAGender)
bands=cut(GPA,3)
frequency(bands)
bands=cut(GPA,breaks = 3)
frequency(bands)
c1 <- cut(GPA, breaks = seq(0, 80, by = 0.5))
table(c1)
table(c1)
bands <- cut(GPA,breaks = 3)
frequency(bands)
## specify break points explicitly using seq function
## cut the age variable using the seq defined above
c1 <- cut(GPA, breaks = seq(0, 5, by = 0.5))
## table of the resulting factor
table(c1)
c1 <- cut(GPA, 3, breaks = seq(2.5, 5, by = 0.5))
c1 <- cut(GPA, breaks = seq(2.5, 5, by = 0.5))
## table of the resulting factor
table(c1)
c1 <- cut(GPA, breaks = (0,2.5],(3,3.5],(4,4.5]))))
c1 <- cut(GPA, breaks = 0,2.53,3.5,4,4.5)
c1 <- cut(GPA, breaks = 0,2.5,3,3.5,4,4.5)
c1 <- cut(GPA, breaks = 3(0,2.5,3,3.5,4,4.5))
c1 <- cut(GPA, breaks = 3
## table of the resulting factor
table(c1)
c1 <- cut(GPA, breaks = 3)
c1 <- cut(GPA, breaks = 3)
table(c1)
c1 <- cut(GPA, breaks = 3,labels = "Band 1","Band 2","Band 3","Band 4")
table(c1)
table(c1)
c1 <- cut(GPA, breaks = 4,labels = "Band 1","Band 2","Band 3","Band 4")
c1 <- cut(GPA, breaks = 4,labels = "Band 1","Band 2","Band 3","Band 4")
c1 <- cut(GPA, breaks = 3,labels = "Band 1","Band 2","Band 3","Band 4")
c1 <- cut(GPA, breaks = 4,labels = "Band 1","Band 2","Band 3","Band 4")
c1 <- cut(GPA, breaks = 3,labels = "Band 1","Band 2","Band 3","Band 4")
table(c1)
c1 <- cut(GPA, breaks=4,labels = "Band 1","Band 2","Band 3","Band 4")
c1 <- cut(GPA, breaks=4,labels = "Band 1","Band 2","Band 3","Band 4")
c1 <- cut(GPA, breaks = 3)
table(c1)
c1 <- cut(GPA, breaks = 4)
table(c1)
c1 <- cut(GPA, breaks = 4, labels = TRUE c("Band 1","Band2","Band3","Band4"))
c1 <- cut(GPA, breaks = 4, labels = c("Band 1","Band2","Band3","Band4"), include.lowest = TRUE)
table(c1)
chisq.test(c1)
chisq.test(c1,prob1)
prob1=c(0.08, 0.38, 0.40, 0.14)
chisq.test(c1,prob1)
chisq.test(table(c1),prob1)
prob1=c(0.08, 0.38, 0.40, 0.14)
chisq.test(table(c1),prob1)
band <- table(c1)
mydata <-matrix(c(gender,band))
prob1=c(0.08, 0.38, 0.40, 0.14)
```{r}
prob1=c(0.08, 0.38, 0.40, 0.14)
gender <- GenderCode
band <- table(c1)
gender <-GenderCode
mydata <-matrix(c(gender,band))
prob1=c(0.08, 0.38, 0.40, 0.14)
gender <- GenderCode
band <- table(c1)
gender <-GenderCode
mydata <-matrix(c(gender,band))
chisq.test(mydata)
