#calculate totals based on each species
myTotal = blkFox+redFox+greyFox
diffTotals = totalFox-myTotal
#make a vector where if the difference between the actual total and the sum of each species doesn't match the value is NA and if it does it's "good"
idBadMath=ifelse(diffTotals!=0,NA,"good")
paste(sum(is.na(idBadMath)),"rows have totals that dont match the sum of each species")
#making a vecor of the NAs (which are actually the rows with bad maths)
idBadMath=which(is.na(idBadMath))
#removing the rows that have bad maths
blkFox=blkFox[-idBadMath]
redFox=redFox[-idBadMath]
greyFox=greyFox[-idBadMath]
totalFox=totalFox[-idBadMath]
camp=camp[-idBadMath]
#load the data from csv
foxData = read.csv("FlyingFoxMonitoring.csv",header = TRUE)
#converting factor to integer
blkFox <- suppressWarnings(c(as.numeric(as.character(foxData$BlackFlyingFox.Count))))
redFox<- suppressWarnings(c(as.numeric(as.character(foxData$LittleRedFlyingFox.Count))))
greyFox<- suppressWarnings(c(as.numeric(as.character(foxData$GreyHeadedFlyingFox.Count))))
totalFox <- suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))
camp <- (as.character(foxData$Camp))
#remove rows where variable FlyingFoxesAbsent does not match the total count being zero or not.
idHasFox=which(foxData$FlyingFoxesAbsent!=TRUE)
idHasNoFox=which(suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))!=0)
illogicalFox=setdiff(idHasFox,idHasNoFox)
blkFox=blkFox[-illogicalFox]
redFox=redFox[-illogicalFox]
greyFox=greyFox[-illogicalFox]
totalFox=totalFox[-illogicalFox]
camp=camp[-illogicalFox]
##removing data with NA
#make a vector of the rows which have missing data
idNA=c(which(is.na(blkFox)),which(is.na(redFox)),which(is.na(greyFox)),which(is.na(totalFox)))
paste(length(idNA),"cases have NAs")
#remove those rows
blkFox=blkFox[-idNA]
redFox=redFox[-idNA]
greyFox=greyFox[-idNA]
totalFox=totalFox[-idNA]
camp=camp[-idNA]
#calculate totals based on each species
myTotal = blkFox+redFox+greyFox
diffTotals = totalFox-myTotal
#make a vector where if the difference between the actual total and the sum of each species doesn't match the value is NA and if it does it's "good"
idBadMath=ifelse(diffTotals!=0,NA,"good")
paste(sum(is.na(idBadMath)),"rows have totals that dont match the sum of each species")
#making a vecor of the NAs (which are actually the rows with bad maths)
idBadMath=which(is.na(idBadMath))
#removing the rows that have bad maths
blkFox=blkFox[-idBadMath]
redFox=redFox[-idBadMath]
greyFox=greyFox[-idBadMath]
totalFox=totalFox[-idBadMath]
camp=camp[-idBadMath]
plot(blkFox, foxData$Camp)
plot(blkFox, camp)
#load the data from csv
foxData = read.csv("FlyingFoxMonitoring.csv",header = TRUE)
#converting factor to integer
blkFox <- suppressWarnings(c(as.numeric(as.character(foxData$BlackFlyingFox.Count))))
redFox<- suppressWarnings(c(as.numeric(as.character(foxData$LittleRedFlyingFox.Count))))
greyFox<- suppressWarnings(c(as.numeric(as.character(foxData$GreyHeadedFlyingFox.Count))))
totalFox <- suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))
camp <- (as.character(foxData$Camp))
#remove rows where variable FlyingFoxesAbsent does not match the total count being zero or not.
idHasFox=which(foxData$FlyingFoxesAbsent!=TRUE)
idHasNoFox=which(suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))!=0)
illogicalFox=setdiff(idHasFox,idHasNoFox)
blkFox=blkFox[-illogicalFox]
redFox=redFox[-illogicalFox]
greyFox=greyFox[-illogicalFox]
totalFox=totalFox[-illogicalFox]
camp=camp[-illogicalFox]
##removing data with NA
#make a vector of the rows which have missing data
idNA=c(which(is.na(blkFox)),which(is.na(redFox)),which(is.na(greyFox)),which(is.na(totalFox)),which(is.na(camp)))
paste(length(idNA),"cases have NAs")
#remove those rows
blkFox=blkFox[-idNA]
redFox=redFox[-idNA]
greyFox=greyFox[-idNA]
totalFox=totalFox[-idNA]
camp=camp[-idNA]
#calculate totals based on each species
myTotal = blkFox+redFox+greyFox
diffTotals = totalFox-myTotal
#make a vector where if the difference between the actual total and the sum of each species doesn't match the value is NA and if it does it's "good"
idBadMath=ifelse(diffTotals!=0,NA,"good")
paste(sum(is.na(idBadMath)),"rows have totals that dont match the sum of each species")
#making a vecor of the NAs (which are actually the rows with bad maths)
idBadMath=which(is.na(idBadMath))
#removing the rows that have bad maths
blkFox=blkFox[-idBadMath]
redFox=redFox[-idBadMath]
greyFox=greyFox[-idBadMath]
totalFox=totalFox[-idBadMath]
camp=camp[-idBadMath]
plot(blkFox, camp)
```{r}
plot(blkFox, camp[1])
plot(blkFox, camp[1]
)
plot(blkFox,which(camp))
plot(camp,blkFox)
table(redFox, blkFox)
plot(redFox, blkFox)
plot(redFox, camp)
plot(camp, redFox)
#proportion for whole species
blk=sum(blkFox)/sum(totalFox)
red=sum(redFox)/sum(totalFox)
grey=sum(greyFox)/sum(totalFox)
foxProp=c(blk,red,grey)*100
pie(table(foxProp))
#proportion for whole species
blk=sum(blkFox)
red=sum(redFox)
grey=sum(greyFox)
foxProp=c(blk,red,grey)/sum(totalFox)
pie(table(foxProp))
#proportion for whole species
blk=sum(blkFox)
red=sum(redFox)
grey=sum(greyFox)
foxProp=c(blk,red,grey)/sum(totalFox)*100
pie(table(foxProp))
#load the data from csv
foxData = read.csv("FlyingFoxMonitoring.csv",header = TRUE)
#converting factor to integer
blkFox <- suppressWarnings(c(as.numeric(as.character(foxData$BlackFlyingFox.Count))))
redFox<- suppressWarnings(c(as.numeric(as.character(foxData$LittleRedFlyingFox.Count))))
greyFox<- suppressWarnings(c(as.numeric(as.character(foxData$GreyHeadedFlyingFox.Count))))
totalFox <- suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))
camp <- (as.character(foxData$Camp))
#remove rows where variable FlyingFoxesAbsent does not match the total count being zero or not.
idHasFox=which(foxData$FlyingFoxesAbsent!=TRUE)
idHasNoFox=which(suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))!=0)
illogicalFox=setdiff(idHasFox,idHasNoFox)
blkFox=blkFox[-illogicalFox]
redFox=redFox[-illogicalFox]
greyFox=greyFox[-illogicalFox]
totalFox=totalFox[-illogicalFox]
camp=camp[-illogicalFox]
##removing data with NA
#make a vector of the rows which have missing data
idNA=c(which(is.na(blkFox)),which(is.na(redFox)),which(is.na(greyFox)),which(is.na(totalFox)),which(is.na(camp)))
paste(length(idNA),"cases have NAs")
#remove those rows
blkFox=blkFox[-idNA]
redFox=redFox[-idNA]
greyFox=greyFox[-idNA]
totalFox=totalFox[-idNA]
camp=camp[-idNA]
#calculate totals based on each species
myTotal = blkFox+redFox+greyFox
diffTotals = totalFox-myTotal
#make a vector where if the difference between the actual total and the sum of each species doesn't match the value is NA and if it does it's "good"
idBadMath=ifelse(diffTotals!=0,NA,"good")
paste(sum(is.na(idBadMath)),"rows have totals that dont match the sum of each species")
#making a vecor of the NAs (which are actually the rows with bad maths)
idBadMath=which(is.na(idBadMath))
#removing the rows that have bad maths
blkFox=blkFox[-idBadMath]
redFox=redFox[-idBadMath]
greyFox=greyFox[-idBadMath]
totalFox=totalFox[-idBadMath]
camp=camp[-idBadMath]
##natural logarithm of the total species count per camp
foxyCamps=which(foxData$FlyingFoxesAbsent!=TRUE)
foxyCamps=totalFox[foxyCamps]
log.CampSize=log(foxyCamps)
#paste(totalFox,logCampSize)
#logCampSize
foxyCamps.length=length(foxyCamps)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(b, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.dist)
sd(boot.dist)
}
hist(boot.dist)
#proportion for whole species
blk=sum(blkFox)
red=sum(redFox)
grey=sum(greyFox)
foxProp=c(blk,red,grey)/sum(totalFox)*100
pie(table(foxProp))
redFox.camps=which(camps)
redFox.camps=which(redFox>0)
redFox.camps
redFox.2b=which(redFox>0)
totalFox.2b=totalFox[redFox.2b]
redFox.2b=redFox[redFox.2b]
cor?
cor(redFox.2b,totalFox.2b)
cor.test(redFox.2b,totalFox.2b)
cor.test(redFox.2b,totalFox.2b, alternative = GREATER)
redFox.2b=which(redFox>0)
totalFox.2b=totalFox[redFox.2b]
redFox.2b=redFox[redFox.2b]
cor.test(redFox.2b,totalFox.2b, alternative = "GREATER")
redFox.2b=which(redFox>0)
totalFox.2b=totalFox[redFox.2b]
redFox.2b=redFox[redFox.2b]
cor.test(redFox.2b,totalFox.2b, alternative = "less")
redFox.2b=which(redFox>0)
totalFox.2b=totalFox[redFox.2b]
redFox.2b=redFox[redFox.2b]
cor.test(redFox.2b/totalFox.2b,totalFox.2b, alternative = "less")
redFox.2b=which(redFox>0)
totalFox.2b=totalFox[redFox.2b]
redFox.2b=redFox[redFox.2b]
cor.test(redFox.2b/totalFox.2b,totalFox.2b, alternative = "less", conf.level = 0.01)
redFox.2b=which(redFox>0)
totalFox.2b=totalFox[redFox.2b]
redFox.2b=redFox[redFox.2b]
cor.test(redFox.2b/totalFox.2b,totalFox.2b, alternative = "less", conf.level = 0.99)
cor.test(redFox.2b/totalFox.2b,totalFox.2b, alternative = ?, conf.level = 0.99)
cor.test(redFox.2b/totalFox.2b,totalFox.2b, alternative = !=0, conf.level = 0.99)
redFox.2b=which(redFox>0)
totalFox.2b=totalFox[redFox.2b]
redFox.2b=redFox[redFox.2b]
cor.test(redFox.2b/totalFox.2b,totalFox.2b, alternative = !0, conf.level = 0.99)
redFox.2b=which(redFox>0)
totalFox.2b=totalFox[redFox.2b]
redFox.2b=redFox[redFox.2b]
cor.test(redFox.2b/totalFox.2b,totalFox.2b, alternative = "les", conf.level = 0.99)
redFox.2b=which(redFox>0)
totalFox.2b=totalFox[redFox.2b]
redFox.2b=redFox[redFox.2b]
cor.test(redFox.2b/totalFox.2b,totalFox.2b, alternative = "more", conf.level = 0.99)
redFox.2b=which(redFox>0)
totalFox.2b=totalFox[redFox.2b]
redFox.2b=redFox[redFox.2b]
cor.test(redFox.2b/totalFox.2b,totalFox.2b, alternative = "two.sided", conf.level = 0.99)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.dist)
sd(boot.dist)
}
hist(boot.dist)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.dist, conf.level = 0.99)
sd(boot.dist)
}
hist(boot.dist)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.dist, conf.level = 0.95)
sd(boot.dist)
}
hist(sd(boot.dist))
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.dist, conf.level = 0.95)
sd(boot.dist)
}
hist(boot.dist)
redFox.3b=which(redFox>0)
totalFox.3b=totalFox[redFox.3b]
redFox.3b=redFox[redFox.3b]
cor.test(redFox.3b/totalFox.3b,totalFox.3b, alternative = "two.sided", conf.level = 0.99)
View(foxData)
View(foxData)
idIndoIsland=foxData$EHP.CampId[-idNA,-idBadMath]
idIndoIsland=foxData$EHP.CampId
idIndoIsland=idIndoIsland[-idNA]
idIndoIsland=idIndoIsland[-idBadMath]
idIndoIsland=which(ehpCamp=="68")
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
ehpCamp=foxData$EHP.CampId
ehpCamp=ehpCamp[-idNA]
ehpCamp=ehpCamp[-idBadMath]
idIndoIsland=which(ehpCamp=="68")
ehcCamp.IndoIsland=ehpCamp[idIndoIsland]
totalFox[idIndoIsland]
date <- suppressWarnings(c(as.numeric(as.Date.factor(foxData$SurveyDate))))
View(foxData)
date <- suppressWarnings(c(as.numeric(as.Date(foxData$SurveyDate))))
date <- suppressWarnings(c(as.Date(foxData$SurveyDate))))
date <- suppressWarnings(c(as.Date(foxData$SurveyDate)))
?as.date
as.date ?
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d-%m-%y"")))
totalFox[idIndoIsland]
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d-%m-%y""))))
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y"")))
totalFox[idIndoIsland]
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
date <- suppressWarnings(c(as.Date(foxData$SurveyDate)))
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,,"%Dd/%mm/%yy",)))
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,,"%dd/%mm/%yy",)))
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%dd/%mm/%yy")))
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
totalFox[idIndoIsland]
indo.lm=lm(indoFox ~ date)
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
indoFox=totalFox[idIndoIsland]
indo.lm=lm(indoFox ~ date)
date <- date[-idNA]
#load the data from csv
foxData = read.csv("FlyingFoxMonitoring.csv",header = TRUE)
#converting factor to integer
blkFox <- suppressWarnings(c(as.numeric(as.character(foxData$BlackFlyingFox.Count))))
redFox<- suppressWarnings(c(as.numeric(as.character(foxData$LittleRedFlyingFox.Count))))
greyFox<- suppressWarnings(c(as.numeric(as.character(foxData$GreyHeadedFlyingFox.Count))))
totalFox <- suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))
camp <- (as.character(foxData$Camp))
#remove rows where variable FlyingFoxesAbsent does not match the total count being zero or not.
idHasFox=which(foxData$FlyingFoxesAbsent!=TRUE)
idHasNoFox=which(suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))!=0)
illogicalFox=setdiff(idHasFox,idHasNoFox)
##removing data with NA
#make a vector of the rows which have missing data
idNA=c(which(is.na(blkFox)),which(is.na(redFox)),which(is.na(greyFox)),which(is.na(totalFox)),which(is.na(camp)),illogicalFox)
paste(length(idNA),"cases have NAs")
#remove those rows
blkFox=blkFox[-idNA]
redFox=redFox[-idNA]
greyFox=greyFox[-idNA]
totalFox=totalFox[-idNA]
#calculate totals based on each species
myTotal = blkFox+redFox+greyFox
diffTotals = totalFox-myTotal
#make a vector where if the difference between the actual total and the sum of each species doesn't match the value is NA and if it does it's "good"
idBadMath=ifelse(diffTotals!=0,NA,"good")
paste(sum(is.na(idBadMath)),"rows have totals that dont match the sum of each species")
#making a vecor of the NAs (which are actually the rows with bad maths)
idBadMath=which(is.na(idBadMath))
#removing the rows that have bad maths
blkFox=blkFox[-idBadMath]
redFox=redFox[-idBadMath]
greyFox=greyFox[-idBadMath]
totalFox=totalFox[-idBadMath]
dirty <-c(idNA,idBadMath)
camp=camp[-dirty]
##natural logarithm of the total species count per camp
foxyCamps=which(foxData$FlyingFoxesAbsent!=TRUE)
foxyCamps=totalFox[foxyCamps]
log.CampSize=log(foxyCamps)
#paste(totalFox,logCampSize)
#logCampSize
foxyCamps.length=length(foxyCamps)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.dist, conf.level = 0.95)
sd(boot.dist)
}
hist(boot.dist)
#proportion for whole species
blk=sum(blkFox)
red=sum(redFox)
grey=sum(greyFox)
foxProp=c(blk,red,grey)/sum(totalFox)*100
pie(table(foxProp))
redFox.3b=which(redFox>0)
totalFox.3b=totalFox[redFox.3b]
redFox.3b=redFox[redFox.3b]
cor.test(redFox.3b/totalFox.3b,totalFox.3b, alternative = "two.sided", conf.level = 0.99)
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
ehpCamp=foxData$EHP.CampId
ehpCamp=ehpCamp[-dirty]
idIndoIsland=which(ehpCamp=="68")
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
date=date[-dirty]
indoFox=totalFox[idIndoIsland]
indo.lm=lm(indoFox ~ date)
indoDates=date[idIndoIsland]
indoFox=totalFox[idIndoIsland]
indo.lm=lm(indoFox ~ indoDates)
summary(indoDates)
indo.lm=lm(indoDates~indoFox)
summary(indoDates)
summary(indo.lm)
indo.lm=lm(indoFox ~indoDates)
summary(indo.lm)
#load and clean data
ehpCamp=foxData$EHP.CampId
ehpCamp=ehpCamp[-dirty]
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
date=date[-dirty]
#vector of id for Indooroopilly Island Camp
idIndoIsland=which(ehpCamp=="68")
#create vector of data and total fox count for Indooroopilly Island
indoDates=date[idIndoIsland]
indoFox=totalFox[idIndoIsland]
# This is probably wrong
indo.lm=lm(indoFox ~indoDates)
summary(indo.lm)
date <- suppressWarnings(c(as.numeric(as.Date(foxData$SurveyDate,"%d/%m/%y"))))
date=date[-dirty]
idIndoIsland=which(ehpCamp=="68")
indoDates=date[idIndoIsland]
indoFox=totalFox[idIndoIsland]
indo.lm=lm(indoFox ~indoDates)
summary(indo.lm)
indoDates
#load and clean data
ehpCamp=foxData$EHP.CampId
ehpCamp=ehpCamp[-dirty]
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
date <- suppressWarnings(c(as.POSIXct(as.Date(foxData$SurveyDate,"%d/%m/%y"))))
date=date[-dirty]
#vector of id for Indooroopilly Island Camp
idIndoIsland=which(ehpCamp=="68")
#create vector of data and total fox count for Indooroopilly Island
indoDates=date[idIndoIsland]
indoDates
indoFox=totalFox[idIndoIsland]
# This is probably wrong
indo.lm=lm(indoFox ~indoDates)
summary(indo.lm)
#load and clean data
ehpCamp=foxData$EHP.CampId
ehpCamp=ehpCamp[-dirty]
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
date=date[-dirty]
#vector of id for Indooroopilly Island Camp
idIndoIsland=which(ehpCamp=="68")
#create vector of data and total fox count for Indooroopilly Island
indoDates=date[idIndoIsland]
indoDates
indoFox=totalFox[idIndoIsland]
# This is probably wrong
indo.lm=lm(indoFox ~indoDates)
summary(indo.lm)
#load and clean data
ehpCamp=foxData$EHP.CampId
ehpCamp=ehpCamp[-dirty]
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
date=date[-dirty]
#vector of id for Indooroopilly Island Camp
idIndoIsland=which(ehpCamp=="68")
#create vector of data and total fox count for Indooroopilly Island
indoDates=date[idIndoIsland]
indoDates
indoFox=totalFox[idIndoIsland]
# This is probably wrong
indo.lm=lm(indoDates~indoFox)
summary(indo.lm)
#load and clean data
ehpCamp=foxData$EHP.CampId
ehpCamp=ehpCamp[-dirty]
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
date=date[-dirty]
#vector of id for Indooroopilly Island Camp
idIndoIsland=which(ehpCamp=="68")
#create vector of data and total fox count for Indooroopilly Island
indoDates=date[idIndoIsland]
indoDates
indoFox=totalFox[idIndoIsland]
# This is probably wrong
indo.lm=lm(indoFox~indoDates)
summary(indo.lm)
#load and clean data
ehpCamp=foxData$EHP.CampId
ehpCamp=ehpCamp[-dirty]
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
date <- suppressWarnings(c(as.Date.numeric(foxData$SurveyDate,"%d/%m/%y")))
#load and clean data
ehpCamp=foxData$EHP.CampId
ehpCamp=ehpCamp[-dirty]
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
date <- suppressWarnings(c(as.numeric(as.Date(foxData$SurveyDate,"%d/%m/%y"))))
date=date[-dirty]
#vector of id for Indooroopilly Island Camp
idIndoIsland=which(ehpCamp=="68")
#create vector of data and total fox count for Indooroopilly Island
indoDates=date[idIndoIsland]
indoFox=totalFox[idIndoIsland]
# This is probably wrong
indo.lm=lm(indoFox ~indoDates)
summary(indo.lm)
