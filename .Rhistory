boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.dist)
sd(boot.dist)
}
hist(boot.dist)
#get number of factors
campFactor=nlevels(ehpCamp)
#create empty vector
foxPerCamp <- rep(NA, campFactor)
#fill vector using for loop
for(j in 1:as.numeric(campFactor)){
foxPerCamp[j] <- c(sum(totalFox[ehpCamp==j]))
}
#visualising with a scatterplot
redblue <- colorRampPalette(c("red","blue"))
plot(foxPerCamp,xlab="Per Camp",ylab="Total Flying Foxes",col=redblue(5))
#proportion for whole species
blk=sum(blkFox)
red=sum(redFox)
grey=sum(greyFox)
foxProp=c(blk,red,grey)/sum(totalFox)*100
#visualise proportions with a bar plot
barplot(matrix(foxProp),beside=TRUE, col=grey.colors(3), ylim=c(0,100))
#load and clean data
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
date=date[-dirty]
#load the data from csv
foxData = read.csv("FlyingFoxMonitoring.csv",header = TRUE)
#converting factor to integer
blkFox <- suppressWarnings(c(as.numeric(as.character(foxData$BlackFlyingFox.Count))))
redFox<- suppressWarnings(c(as.numeric(as.character(foxData$LittleRedFlyingFox.Count))))
greyFox<- suppressWarnings(c(as.numeric(as.character(foxData$GreyHeadedFlyingFox.Count))))
totalFox <- suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))
camp <- (as.character(foxData$Camp))
ehpCamp<-foxData$EHP.CampId
#remove rows where variable FlyingFoxesAbsent does not match the total count being zero or not.
idHasFox=which(foxData$FlyingFoxesAbsent!=TRUE)
idHasNoFox=which(suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))!=0)
illogicalFox=setdiff(idHasFox,idHasNoFox)
##removing data with NA
#make a vector of the rows which have missing data
idNA=c(which(is.na(blkFox)),which(is.na(redFox)),which(is.na(greyFox)),which(is.na(totalFox)),which(is.na(camp)),illogicalFox,which(is.na(ehpCamp)))
paste(length(idNA),"cases have NAs")
#remove those rows
blkFox=blkFox[-idNA]
redFox=redFox[-idNA]
greyFox=greyFox[-idNA]
totalFox=totalFox[-idNA]
#calculate totals based on each species
myTotal = blkFox+redFox+greyFox
diffTotals = totalFox-myTotal
#make a vector where if the difference between the actual total and the sum of each species doesn't match the value is NA and if it does it's "good"
idBadMath=ifelse(diffTotals!=0,NA,"good")
paste(sum(is.na(idBadMath)),"rows have totals that dont match the sum of each species")
#making a vecor of the NAs (which are actually the rows with bad maths)
idBadMath=which(is.na(idBadMath))
#removing the rows that have bad maths
blkFox=blkFox[-idBadMath]
redFox=redFox[-idBadMath]
greyFox=greyFox[-idBadMath]
totalFox=totalFox[-idBadMath]
dirty <-c(idNA,idBadMath)
camp=camp[-dirty]
ehpCamp=ehpCamp[-dirty]
##natural logarithm of the total species count per camp
foxyCamps=which(foxData$FlyingFoxesAbsent!=TRUE)
foxyCamps=totalFox[foxyCamps]
log.CampSize=log(foxyCamps)
#paste(totalFox,logCampSize)
#logCampSize
foxyCamps.length=length(foxyCamps)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.dist, conf.level = 0.95)
sd(boot.dist)
}
hist(boot.dist)
#get number of factors
campFactor=nlevels(ehpCamp)
#create empty vector
foxPerCamp <- rep(NA, campFactor)
#fill vector using for loop
for(j in 1:as.numeric(campFactor)){
foxPerCamp[j] <- c(sum(totalFox[ehpCamp==j]))
}
#visualising with a scatterplot
redblue <- colorRampPalette(c("red","blue"))
plot(foxPerCamp,xlab="Per Camp",ylab="Total Flying Foxes",col=redblue(5))
#proportion for whole species
blk=sum(blkFox)
red=sum(redFox)
grey=sum(greyFox)
foxProp=c(blk,red,grey)/sum(totalFox)*100
#visualise proportions with a bar plot
barplot(matrix(foxProp),beside=TRUE, col=grey.colors(3), ylim=c(0,100))
redFox.3b=which(redFox>0)
totalFox.3b=totalFox[redFox.3b]
redFox.3b=redFox[redFox.3b]
cor.test(redFox.3b/totalFox.3b,totalFox.3b, alternative = "two.sided", conf.level = 0.99)
#load and clean data
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
date=date[-dirty]
#vector of id for Indooroopilly Island Camp
idIndoIsland=which(ehpCamp=="68")
#create vector of data and total fox count for Indooroopilly Island
indoDates=date[idIndoIsland]
indoFox=totalFox[idIndoIsland]
# This is probably wrong
indo.lm=lm(indoFox ~ as.numeric(indoDates))
summary(indo.lm)
plot(indoFox~indoDates, col=redblue(5),xlab="Dates", ylab = "Num. FLying Foxes")
#load the data from csv
foxData = read.csv("FlyingFoxMonitoring.csv",header = TRUE)
#converting factor to integer
blkFox <- suppressWarnings(c(as.numeric(as.character(foxData$BlackFlyingFox.Count))))
redFox<- suppressWarnings(c(as.numeric(as.character(foxData$LittleRedFlyingFox.Count))))
greyFox<- suppressWarnings(c(as.numeric(as.character(foxData$GreyHeadedFlyingFox.Count))))
totalFox <- suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))
camp <- (as.character(foxData$Camp))
ehpCamp<-foxData$EHP.CampId
#remove rows where variable FlyingFoxesAbsent does not match the total count being zero or not.
idHasFox=which(foxData$FlyingFoxesAbsent!=TRUE)
idHasNoFox=which(suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))!=0)
illogicalFox=setdiff(idHasFox,idHasNoFox)
##removing data with NA
#make a vector of the rows which have missing data
idNA=c(which(is.na(blkFox)),which(is.na(redFox)),which(is.na(greyFox)),which(is.na(totalFox)),which(is.na(camp)),illogicalFox,which(is.na(ehpCamp)))
paste(length(idNA),"cases have NAs")
#remove those rows
blkFox=blkFox[-idNA]
redFox=redFox[-idNA]
greyFox=greyFox[-idNA]
totalFox=totalFox[-idNA]
#calculate totals based on each species
myTotal = blkFox+redFox+greyFox
diffTotals = totalFox-myTotal
#make a vector where if the difference between the actual total and the sum of each species doesn't match the value is NA and if it does it's "good"
idBadMath=ifelse(diffTotals!=0,NA,"good")
paste(sum(is.na(idBadMath)),"rows have totals that dont match the sum of each species")
#making a vecor of the NAs (which are actually the rows with bad maths)
idBadMath=which(is.na(idBadMath))
#removing the rows that have bad maths
blkFox=blkFox[-idBadMath]
redFox=redFox[-idBadMath]
greyFox=greyFox[-idBadMath]
totalFox=totalFox[-idBadMath]
dirty <-c(idNA,idBadMath)
camp=camp[-dirty]
ehpCamp=ehpCamp[-dirty]
##natural logarithm of the total species count per camp
foxyCamps=which(foxData$FlyingFoxesAbsent!=TRUE)
foxyCamps=totalFox[foxyCamps]
log.CampSize=log(foxyCamps)
#paste(totalFox,logCampSize)
#logCampSize
foxyCamps.length=length(foxyCamps)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.dist, conf.level = 0.95)
sd(boot.dist)
}
hist(boot.dist)
#get number of factors
campFactor=nlevels(ehpCamp)
#create empty vector
foxPerCamp <- rep(NA, campFactor)
#fill vector using for loop
for(j in 1:as.numeric(campFactor)){
foxPerCamp[j] <- c(sum(totalFox[ehpCamp==j]))
}
#visualising with a scatterplot
redblue <- colorRampPalette(c("red","blue"))
plot(foxPerCamp,xlab="Per Camp",ylab="Total Flying Foxes",col=redblue(5))
#proportion for whole species
blk=sum(blkFox)
red=sum(redFox)
grey=sum(greyFox)
foxProp=c(blk,red,grey)/sum(totalFox)*100
#visualise proportions with a bar plot
barplot(matrix(foxProp),beside=TRUE, col=grey.colors(3), ylim=c(0,100))
redFox.3b=which(redFox>0)
totalFox.3b=totalFox[redFox.3b]
redFox.3b=redFox[redFox.3b]
cor.test(redFox.3b/totalFox.3b,totalFox.3b, alternative = "two.sided", conf.level = 0.99)
#load and clean data
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
date=date[-dirty]
#vector of id for Indooroopilly Island Camp
idIndoIsland=which(ehpCamp=="68")
#create vector of data and total fox count for Indooroopilly Island
indoDates=date[idIndoIsland]
indoFox=totalFox[idIndoIsland]
# This is probably wrong
indo.lm=lm(indoFox ~ as.numeric(indoDates))
summary(indo.lm)
plot(indoFox~indoDates, col=redblue(5),xlab="Dates", ylab = "Num. FLying Foxes")
abline(lm(indoFox ~ indoDates))
plot(indoFox~indoDates, col=redblue(5),xlab="Dates", ylab = "Num. FLying Foxes")
abline(lm(indoFox ~ indoDates))
abline(lm(indoFox ~ indoDates))
plot(indoFox~indoDates, col=redblue(5),xlab="Dates", ylab = "Num. FLying Foxes")
plot(indoFox~indoDates, col=redblue(5),xlab="Dates", ylab = "Num. FLying Foxes",abline(lm(indoFox ~ indoDates)))
abline(lm(indoFox ~ indoDates))
abline(indo.lm)
plot(indoFox~indoDates, col=redblue(5),xlab="Dates", ylab = "Num. FLying Foxes")
abline(indo.lm)
abline(lm(indoFox ~ as.numeric(indoDates))
abline((lm(indoFox ~ as.numeric(indoDates)))
abline?
#load and clean data
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
#load the data from csv
foxData = read.csv("FlyingFoxMonitoring.csv",header = TRUE)
#converting factor to integer
blkFox <- suppressWarnings(c(as.numeric(as.character(foxData$BlackFlyingFox.Count))))
redFox<- suppressWarnings(c(as.numeric(as.character(foxData$LittleRedFlyingFox.Count))))
greyFox<- suppressWarnings(c(as.numeric(as.character(foxData$GreyHeadedFlyingFox.Count))))
totalFox <- suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))
camp <- (as.character(foxData$Camp))
ehpCamp<-foxData$EHP.CampId
#remove rows where variable FlyingFoxesAbsent does not match the total count being zero or not.
idHasFox=which(foxData$FlyingFoxesAbsent!=TRUE)
idHasNoFox=which(suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))!=0)
illogicalFox=setdiff(idHasFox,idHasNoFox)
##removing data with NA
#make a vector of the rows which have missing data
idNA=c(which(is.na(blkFox)),which(is.na(redFox)),which(is.na(greyFox)),which(is.na(totalFox)),which(is.na(camp)),illogicalFox,which(is.na(ehpCamp)))
paste(length(idNA),"cases have NAs")
#remove those rows
blkFox=blkFox[-idNA]
redFox=redFox[-idNA]
greyFox=greyFox[-idNA]
totalFox=totalFox[-idNA]
#calculate totals based on each species
myTotal = blkFox+redFox+greyFox
diffTotals = totalFox-myTotal
#make a vector where if the difference between the actual total and the sum of each species doesn't match the value is NA and if it does it's "good"
idBadMath=ifelse(diffTotals!=0,NA,"good")
paste(sum(is.na(idBadMath)),"rows have totals that dont match the sum of each species")
#making a vecor of the NAs (which are actually the rows with bad maths)
idBadMath=which(is.na(idBadMath))
#removing the rows that have bad maths
blkFox=blkFox[-idBadMath]
redFox=redFox[-idBadMath]
greyFox=greyFox[-idBadMath]
totalFox=totalFox[-idBadMath]
dirty <-c(idNA,idBadMath)
camp=camp[-dirty]
ehpCamp=ehpCamp[-dirty]
##natural logarithm of the total species count per camp
foxyCamps=which(foxData$FlyingFoxesAbsent!=TRUE)
foxyCamps=totalFox[foxyCamps]
log.CampSize=log(foxyCamps)
#paste(totalFox,logCampSize)
#logCampSize
foxyCamps.length=length(foxyCamps)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.dist, conf.level = 0.95)
sd(boot.dist)
}
hist(boot.dist)
#get number of factors
campFactor=nlevels(ehpCamp)
#create empty vector
foxPerCamp <- rep(NA, campFactor)
#fill vector using for loop
for(j in 1:as.numeric(campFactor)){
foxPerCamp[j] <- c(sum(totalFox[ehpCamp==j]))
}
#visualising with a scatterplot
redblue <- colorRampPalette(c("red","blue"))
plot(foxPerCamp,xlab="Per Camp",ylab="Total Flying Foxes",col=redblue(5))
#proportion for whole species
blk=sum(blkFox)
red=sum(redFox)
grey=sum(greyFox)
foxProp=c(blk,red,grey)/sum(totalFox)*100
#visualise proportions with a bar plot
barplot(matrix(foxProp),beside=TRUE, col=grey.colors(3), ylim=c(0,100))
redFox.3b=which(redFox>0)
totalFox.3b=totalFox[redFox.3b]
redFox.3b=redFox[redFox.3b]
cor.test(redFox.3b/totalFox.3b,totalFox.3b, alternative = "two.sided", conf.level = 0.99)
#load and clean data
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
date=date[-dirty]
#vector of id for Indooroopilly Island Camp
idIndoIsland=which(ehpCamp=="68")
#create vector of data and total fox count for Indooroopilly Island
indoDates=date[idIndoIsland]
indoFox=totalFox[idIndoIsland]
# This is probably wrong
indo.lm=lm(indoFox ~ as.numeric(indoDates))
summary(indo.lm)
plot(indoFox~indoDates, col=redblue(5),xlab="Dates", ylab = "Num. FLying Foxes")
abline(indo.lm)
#load the data from csv
foxData = read.csv("FlyingFoxMonitoring.csv",header = TRUE)
#converting factor to integer
blkFox <- suppressWarnings(c(as.numeric(as.character(foxData$BlackFlyingFox.Count))))
redFox<- suppressWarnings(c(as.numeric(as.character(foxData$LittleRedFlyingFox.Count))))
greyFox<- suppressWarnings(c(as.numeric(as.character(foxData$GreyHeadedFlyingFox.Count))))
totalFox <- suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))
camp <- (as.character(foxData$Camp))
ehpCamp<-foxData$EHP.CampId
#remove rows where variable FlyingFoxesAbsent does not match the total count being zero or not.
idHasFox=which(foxData$FlyingFoxesAbsent!=TRUE)
idHasNoFox=which(suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))!=0)
illogicalFox=setdiff(idHasFox,idHasNoFox)
##removing data with NA
#make a vector of the rows which have missing data
idNA=c(which(is.na(blkFox)),which(is.na(redFox)),which(is.na(greyFox)),which(is.na(totalFox)),which(is.na(camp)),illogicalFox,which(is.na(ehpCamp)))
paste(length(idNA),"cases have NAs")
#remove those rows
blkFox=blkFox[-idNA]
redFox=redFox[-idNA]
greyFox=greyFox[-idNA]
totalFox=totalFox[-idNA]
#calculate totals based on each species
myTotal = blkFox+redFox+greyFox
diffTotals = totalFox-myTotal
#make a vector where if the difference between the actual total and the sum of each species doesn't match the value is NA and if it does it's "good"
idBadMath=ifelse(diffTotals!=0,NA,"good")
paste(sum(is.na(idBadMath)),"rows have totals that dont match the sum of each species")
#making a vecor of the NAs (which are actually the rows with bad maths)
idBadMath=which(is.na(idBadMath))
#removing the rows that have bad maths
blkFox=blkFox[-idBadMath]
redFox=redFox[-idBadMath]
greyFox=greyFox[-idBadMath]
totalFox=totalFox[-idBadMath]
dirty <-c(idNA,idBadMath)
camp=camp[-dirty]
ehpCamp=ehpCamp[-dirty]
##natural logarithm of the total species count per camp
foxyCamps=which(foxData$FlyingFoxesAbsent!=TRUE)
foxyCamps=totalFox[foxyCamps]
log.CampSize=log(foxyCamps)
#paste(totalFox,logCampSize)
#logCampSize
foxyCamps.length=length(foxyCamps)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.dist, conf.level = 0.95)
sd(boot.dist)
}
hist(boot.dist)
#get number of factors
campFactor=nlevels(ehpCamp)
#create empty vector
foxPerCamp <- rep(NA, campFactor)
#fill vector using for loop
for(j in 1:as.numeric(campFactor)){
foxPerCamp[j] <- c(sum(totalFox[ehpCamp==j]))
}
#visualising with a scatterplot
redblue <- colorRampPalette(c("red","blue"))
plot(foxPerCamp,xlab="Per Camp",ylab="Total Flying Foxes",col=redblue(5))
#proportion for whole species
blk=sum(blkFox)
red=sum(redFox)
grey=sum(greyFox)
foxProp=c(blk,red,grey)/sum(totalFox)*100
#visualise proportions with a bar plot
barplot(matrix(foxProp),beside=TRUE, col=grey.colors(3), ylim=c(0,100))
redFox.3b=which(redFox>0)
totalFox.3b=totalFox[redFox.3b]
redFox.3b=redFox[redFox.3b]
cor.test(redFox.3b/totalFox.3b,totalFox.3b, alternative = "two.sided", conf.level = 0.99)
#load and clean data
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
date=date[-dirty]
#vector of id for Indooroopilly Island Camp
idIndoIsland=which(ehpCamp=="68")
#create vector of data and total fox count for Indooroopilly Island
indoDates=date[idIndoIsland]
indoFox=totalFox[idIndoIsland]
# This is probably wrong
indo.lm=lm(indoFox ~ as.numeric(indoDates))
summary(indo.lm)
plot(indoFox~indoDates, col=redblue(5),xlab="Dates", ylab = "Num. FLying Foxes")
abline(indo.lm)
#load the data from csv
foxData = read.csv("FlyingFoxMonitoring.csv",header = TRUE)
#converting factor to integer
blkFox <- suppressWarnings(c(as.numeric(as.character(foxData$BlackFlyingFox.Count))))
redFox<- suppressWarnings(c(as.numeric(as.character(foxData$LittleRedFlyingFox.Count))))
greyFox<- suppressWarnings(c(as.numeric(as.character(foxData$GreyHeadedFlyingFox.Count))))
totalFox <- suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))
camp <- (as.character(foxData$Camp))
ehpCamp<-foxData$EHP.CampId
#remove rows where variable FlyingFoxesAbsent does not match the total count being zero or not.
idHasFox=which(foxData$FlyingFoxesAbsent!=TRUE)
idHasNoFox=which(suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))!=0)
illogicalFox=setdiff(idHasFox,idHasNoFox)
##removing data with NA
#make a vector of the rows which have missing data
idNA=c(which(is.na(blkFox)),which(is.na(redFox)),which(is.na(greyFox)),which(is.na(totalFox)),which(is.na(camp)),illogicalFox,which(is.na(ehpCamp)))
paste(length(idNA),"cases have NAs")
#remove those rows
blkFox=blkFox[-idNA]
redFox=redFox[-idNA]
greyFox=greyFox[-idNA]
totalFox=totalFox[-idNA]
#calculate totals based on each species
myTotal = blkFox+redFox+greyFox
diffTotals = totalFox-myTotal
#make a vector where if the difference between the actual total and the sum of each species doesn't match the value is NA and if it does it's "good"
idBadMath=ifelse(diffTotals!=0,NA,"good")
paste(sum(is.na(idBadMath)),"rows have totals that dont match the sum of each species")
#making a vecor of the NAs (which are actually the rows with bad maths)
idBadMath=which(is.na(idBadMath))
#removing the rows that have bad maths
blkFox=blkFox[-idBadMath]
redFox=redFox[-idBadMath]
greyFox=greyFox[-idBadMath]
totalFox=totalFox[-idBadMath]
dirty <-c(idNA,idBadMath)
camp=camp[-dirty]
ehpCamp=ehpCamp[-dirty]
##natural logarithm of the total species count per camp
foxyCamps=which(foxData$FlyingFoxesAbsent!=TRUE)
foxyCamps=totalFox[foxyCamps]
log.CampSize=log(foxyCamps)
#paste(totalFox,logCampSize)
#logCampSize
foxyCamps.length=length(foxyCamps)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(foxyCamps, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist[i]=mean(boot.dist, conf.level = 0.95)
sd(boot.dist)
}
hist(boot.dist)
#get number of factors
campFactor=nlevels(ehpCamp)
#create empty vector
foxPerCamp <- rep(NA, campFactor)
#fill vector using for loop
for(j in 1:as.numeric(campFactor)){
foxPerCamp[j] <- c(sum(totalFox[ehpCamp==j]))
}
#visualising with a scatterplot
redblue <- colorRampPalette(c("red","blue"))
plot(foxPerCamp,xlab="Per Camp",ylab="Total Flying Foxes",col=redblue(5))
#proportion for whole species
blk=sum(blkFox)
red=sum(redFox)
grey=sum(greyFox)
foxProp=c(blk,red,grey)/sum(totalFox)*100
#visualise proportions with a bar plot
barplot(matrix(foxProp),beside=TRUE, col=grey.colors(3), ylim=c(0,100))
redFox.3b=which(redFox>0)
totalFox.3b=totalFox[redFox.3b]
redFox.3b=redFox[redFox.3b]
cor.test(redFox.3b/totalFox.3b,totalFox.3b, alternative = "two.sided", conf.level = 0.99)
#load and clean data
#Use the function as.Date to convert the date strings in the variable SurveyDate into dates.
date <- suppressWarnings(c(as.Date(foxData$SurveyDate,"%d/%m/%y")))
date=date[-dirty]
#vector of id for Indooroopilly Island Camp
idIndoIsland=which(ehpCamp=="68")
#create vector of data and total fox count for Indooroopilly Island
indoDates=date[idIndoIsland]
indoFox=totalFox[idIndoIsland]
# This is probably wrong
indo.lm=lm(indoFox ~ as.numeric(indoDates))
summary(indo.lm)
plot(indoFox~indoDates, col=redblue(5),xlab="Dates", ylab = "Num. FLying Foxes")
abline(indo.lm)
